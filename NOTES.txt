# GitHub clone link for Angular applications used for automation:
-----------------------------------------------------------------
UI Automation Practice Project: https://github.com/Postavshik/ngx-cypress-test
API Automation Practice Project: https://github.com/gothinkster/angular-realworld-example-app


# Understanding the Folder/Framework Structure:
-----------------------------------------------
support:
	> index.js -> First file cypress looks into before execution of the tests. Any code that we put here will be executed at the very first moment (i.e. any imports, adding any additional libraries, change default cypress behaviour or add hooks which needs to run for every single tests).

	> commands.js -> This is the file where you can put your commonly used functions, functions which you may need to call in different tests (i.e. login function). You can also overwrite any existing cypress function here.

plugins:
	> index.js -> If you want to extend cypress's functionality, you can put here the custom plugins code here. It can have listeners, customized methods to handle the Cypress events.

integration:
	> This is the primary folder where you can put all your tests. Cypress runner will look into this folder and fine your test files.

fixtures:
	> Here we will put all out test data objects, mock objects and any other data (i.e. download data, upload data) that we need for our tests. In most of the cases it will be a json file with different test data.

cypress.json
	> The first time you open Cypress Test Runner, it creates the cypress.json configuration file at the root folder of our project. This JSON file is used to store any configuration values you supply. This configuration file can be used to change different default settings for the Cypress. To know about the default cypress settings and configuration options pay a visit to: 
		https://docs.cypress.io/guides/references/configuration



# Understanding CSS Selectors:
-------------------------------
1. The universal CSS selector
-> *

2. The type/tagname CSS selector
-> input

3. The class CSS selector
-> .input

4. The id CSS selector
-> #username

5. The attribute CSS selector
-> [attr]
-> [attr=value]
-> [attr~=value]
-> [attr|=value]
-> [attr^=value]
-> [attr$=value]
-> [attr*=value]

6. The grouping CSS selector
-> div, span

7.. The direct child CSS selector
-> div > p

8. The direct or sub child / descendant CSS selector
-> div p

9. The general sibling CSS selector
-> p ~ span [Description: The general sibling selector ~ selects all elements that are next siblings of a specified element. This will match all <span> elements that follow a <p>, immediately or not]

10. The adjacent sibling CSS selector
-> div + p [Description: The + selector is used to select an element that is directly after another specific element. The following example selects the first p element that are placed immediately after div elements.]

11. The column CSS selector
-> col || td [Description: This will match all <td> elements that belong to the scope of the <col>]

12. Pseudo classes
	a. Get the elements which has been visited
	-> a:visited

	b. Get the element by partial inner text
	-> span:contains("Forms")

13. Pseudo elements
	a. Get the first line for a given element
	-> p::first-line

	b. Get the specific element
	-> li::nth-of-type(4)
	-> li::nth-child(4)


# API Testing with Cypress:
---------------------------
1. API stands for 'Application Programming Interface'
2. Types of requests: GET, POST, PUT, PATCH, DELETE etc
3. Typical request has: URL, Headers, Request Type and Request Body
4. Cypress has built in server which can intercept browser API requests and provide mock response
5. Cypress can make API requests and process responses